---
description:
globs:
alwaysApply: true
---
# CLAUDE.md

あなたは高度な問題解決能力を持つ AI アシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}

<!-- このテンプレート変数はユーザーの入力プロンプトに自動置換されます -->

</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
   <タスク分析>

   - 主要なタスクを簡潔に要約してください。
   - 記載された技術スタックを確認し、その制約内での実装方法を検討してください。
     **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
   - 重要な要件と制約を特定してください。
   - 潜在的な課題をリストアップしてください。
   - タスク実行のための具体的なステップを詳細に列挙してください。
   - それらのステップの最適な実行順序を決定してください。

   ### 重複実装の防止

   実装前に以下の確認を行ってください：

   - 既存の類似機能の有無
   - 同名または類似名の関数やコンポーネント
   - 重複する API エンドポイント
   - 共通化可能な処理の特定

   このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
   </タスク分析>

---

2. タスクの実行
   - 特定したステップを一つずつ実行してください。
   - 各ステップの完了後、簡潔に進捗を報告してください。
   - 実装時は以下の点に注意してください：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置

---

3. 品質管理と問題対応

   - 各タスクの実行結果を迅速に検証してください。
   - エラーや不整合が発生した場合は、以下のプロセスで対応してください：
     a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析

   - 検証結果は以下の形式で記録してください：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

---

4. 最終確認
   - すべてのタスクが完了したら、成果物全体を評価してください。
   - 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
   - 実装した機能に重複がないことを最終確認してください。

---

5. 結果報告
   以下のフォーマットで最終的な結果を報告してください：

   ```markdown
   # 実行結果報告

   ## 概要

   [全体の要約を簡潔に記述]

   ## 実行ステップ

   1. [ステップ 1 の説明と結果]
   2. [ステップ 2 の説明と結果]
      ...

   ## 最終成果物

   [成果物の詳細や、該当する場合はリンクなど]

   ## 課題対応（該当する場合）

   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案

   - [気づいた点や改善提案があれば記述]
   ```

---

## 重要な注意事項（命令）

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UX デザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（API やフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。
- **コード中の既存のコメントは除去する必要がない場合は絶対に除去してはならず、可能な限り既存のコメントを保持します。** 新規にコードを書く箇所では詳細にコメントを記載して、後から読みやすいようにしてください。
- コーディングルール・コーディングスタイルは周辺のコードの雰囲気を読み取った上で適切に合わせる必要があります。
- HTML を除き基本シングルクオートを使っています。ダブルクオートは Python の docstring 以外使いません。ただし、周辺のコードがダブルクオートを使っている場合はダブルクオートを使います。
- 関数への引数・配列・辞書が複数行に跨る場合、末尾のカンマ (ケツカンマ) を必ず付与します。
- Python においては、なるべく関数の引数と戻り値に厳密な Type Hint を付与します。Python 3.11 以降を使っているので、from typing から Dict, List, Tuple などをインポートするのではなく、直接 list, dict, tuple（全て小文字）などのビルドイン型を Type Hint に指定します。typing.Dict/List/Tuple などのモジュールは絶対にインポートしません。
- Python においては、例外をログ出力する際に {e} と埋め込むとエラー詳細がわからなくなるため、logging モジュールなど exc_info を渡せるものであれば exc_info=ex (e ではなく ex という変数名を好みます) として渡し、print() 以外のロギング手段がないプロジェクトでは traceback.print_exc() を使うように心がけます (TypeScript での try ~ catch には error という名前の変数を使います) 。
- Python においては、ファイルシステム操作に関して、os.path など os 以下の関数はなるべく使用を避け、代わりによりモダンな pathlib を利用します。
- Python においては、クラス・メソッド・関数の docstring の下に 1 行空白行を空けます。
- CSS コードは display を一番上にかき、そのあと位置指定系のプロパティから色系、transition、最後に cursor や pointer-events などを記述するコーディングスタイルでなければなりません。
- コメントやログに出力する文字列に関して、可読性を高めるため、英単語と日本語の間には必ず半角スペースを一つ入れます。
  - 例: 'では Apple の iPhone はどうですか？'
- 英語では「This becomes:」のように文の末尾にコロンを使うシチュエーションでも、「これはこのようになります。」のように句点で文末を締めます。日本語では文末がコロンで終わる文はあまり一般的ではないためです。
- 問題が発生した時は、必ず Web で類似の問題や解決策がないかを積極的に検索し、最新の情報をもとに修正を行います。
- pnpm や uv はそれぞれ `apps/client/` と `apps/server/` のディレクトリに移動した状態で実行してください。ルートディレクトリにはパッケージ管理系のファイルは一切配置していません。
- サーバー側では uv を使っているので、python コマンドは必ず全て uv run 経由で実行します。python を直接実行すると .venv/ 以下のライブラリがインストールされていないために失敗します。

---

## アーキテクチャ概要

### モノレポ構造

このプロジェクトは 2 つのメインアプリケーションを含むモノレポです：

- **Client** (`/apps/client`): React 19 + TypeScript の SPA
- **Server** (`/apps/server`): Python 3.11 の FastAPI REST API

### クライアントアーキテクチャ

- **ルーティング**: TanStack Router のファイルベースルーティング (`src/routes/`)
- **状態管理**: サーバー状態は TanStack Query、クライアント状態は TanStack Store
- **スタイリング**: Vanilla Extract による型安全な CSS-in-TypeScript (`src/styles/`)
- **API 連携**: `src/integrations/tanstack-query/` にカスタムクエリ関数
- **コンポーネント**: `src/components/` に機能別に整理

### サーバーアーキテクチャ

- **フレームワーク**: FastAPI (async/await サポート)
- **ORM**: Tortoise ORM + PostgreSQL (asyncpg ドライバー)
- **モデル**: `src/models.py` で Tortoise ORM を使用して定義
- **API ルート**: `src/api.py` に集約
- **データベース**: `src/database.py` で設定、Aerich でマイグレーション管理

### 主要な設計パターン

1. **API バージョニング**: 全エンドポイントは `/api/v1/` プレフィックス付き
2. **型安全性**: クライアントは完全な TypeScript、サーバーは Python 型ヒント
3. **完全非同期**: クライアント (React Suspense) もサーバー (FastAPI async) も完全非同期
4. **ファイルベースルーティング**: クライアントは TanStack Router のファイルベースルーティングで自動ルート生成

### データベーススキーマ

- **tweets**: Twitter から取得したツイートデータを保存
- **read_tweets**: ユーザーが既読したツイートを追跡
- **bookmarked_tweets**: ユーザーのブックマークを保存

### 開発ツール

- **Task**: クロスプラットフォームタスクランナー（全コマンドは `task` で開始）
- **mise**: Node.js 22、pnpm、uv、task のバージョン管理
- **Biome** (Client): JavaScript/TypeScript フォーマッター・リンター
- **Ruff** (Server): Python フォーマッター・リンター
- **Vitest** (Client): Vite 統合のテストランナー
- **pytest** (Server): Python テストフレームワーク

---

# コーディング規約

## 全般

- コードをざっくり斜め読みした際の可読性を高めるため、コメントを多めに記述する
- コードを変更する際、既存のコメントは、変更によりコメント内容がコードの記述と合わなくなった場合を除き、コメント量に関わらずそのまま保持する
- ログメッセージに関しては文字化けを避けるため、必ず英語で記述する
- それ以外のコーディングスタイルは、原則変更箇所周辺のコードスタイルに合わせる

## Python コード

- 文字列にはシングルクォートを用いる (Docstring を除く)
- Python 3.11 の機能を使う (3.10 以下での動作は考慮不要)
- ビルトイン型を使用した Type Hint で実装する (from typing import List, Dict などは避ける)
- 変数・インスタンス変数は snake_case で命名する
- 関数・クラスは UpperCamelCase で命名する
  - FastAPI で定義するエンドポイントの関数名も UpperCamelCase で命名する必要がある
  - FastAPI で定義するエンドポイント名は `UserUpdateAPI` のように、名詞 -> 動詞 -> API の順の命名規則を忠実に守ること
- メソッドは lowerCamelCase で命名する
- クラス内のメソッドとメソッドの間には 2 行の空白行を挿入する
- 複数行のコレクションには末尾カンマを含める

## Vue / TypeScript コード

- 文字列にはシングルクォートを用いる
- TypeScript による型安全性を確保する

## テスト駆動開発 (TDD)

このプロジェクトではテスト駆動開発を採用しています。新機能の実装や既存機能の修正を行う際は、必ず以下の手順に従ってください：

1. **テストを先に書く**: 実装前に失敗するテストを作成
2. **最小限の実装**: テストが通る最小限のコードを実装
3. **リファクタリング**: テストが通ることを確認しながらコードを改善

## テストケースの粒度

テストケースは**ビジネス側の観点から見た振る舞い**の粒度で作成してください：

- ❌ 悪い例: `calculateTotal() が正しい値を返すこと`
- ✅ 良い例: `ユーザーがツイートをブックマークすると、ブックマーク一覧に表示されること`

テストの記述は、技術的な実装詳細ではなく、ユーザーやシステムの振る舞いに焦点を当てるようにしてください。

---

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。
