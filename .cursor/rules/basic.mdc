---
description:
globs:
alwaysApply: true
---
# basic.mdc

This file provides guidance to Cursor Agent when working with code in this repository.

## よく使用する開発コマンド

### インストール
```bash
# 全ての依存関係をインストール（クライアントとサーバー）
task install

# クライアントの依存関係のみインストール
task install:client

# サーバーの依存関係のみインストール
task install:server
```

### 開発
```bash
# クライアントとサーバーの開発サーバーを同時に起動
task dev

# クライアント開発サーバーのみ起動 (http://localhost:3000)
task dev:client

# サーバー開発サーバーのみ起動 (http://localhost:8000)
task dev:server
```

### テスト
```bash
# 全てのテストを実行
task test

# クライアントのテストのみ実行
task test:client

# サーバーのテストのみ実行
task test:server

# クライアントのテストをウォッチモードで実行
cd apps/client && pnpm test:watch

# 単一のテストファイルを実行
cd apps/server && uv run pytest tests/test_api.py
```

### コード品質
```bash
# 全てのリンターを実行
task lint

# 全てのコードをフォーマット
task format

# 型チェック
task type-check

# クライアント固有のチェック
cd apps/client && pnpm check  # biome check (lint + format) を実行

# サーバー固有のチェック
cd apps/server && uv run ruff check . --fix
cd apps/server && uv run mypy src
```

### ビルド
```bash
# クライアントをプロダクション用にビルド
task build
```

## アーキテクチャ概要

### モノレポ構造
このプロジェクトは2つのメインアプリケーションを含むモノレポです：
- **Client** (`/apps/client`): React 19 + TypeScript の SPA
- **Server** (`/apps/server`): Python 3.11 の FastAPI REST API

### クライアントアーキテクチャ
- **ルーティング**: TanStack Router のファイルベースルーティング (`src/routes/`)
- **状態管理**: サーバー状態は TanStack Query、クライアント状態は TanStack Store
- **スタイリング**: Vanilla Extract による型安全な CSS-in-TypeScript (`src/styles/`)
- **API連携**: `src/integrations/tanstack-query/` にカスタムクエリ関数
- **コンポーネント**: `src/components/` に機能別に整理

### サーバーアーキテクチャ
- **フレームワーク**: FastAPI (async/await サポート)
- **ORM**: Tortoise ORM + PostgreSQL (asyncpg ドライバー)
- **モデル**: `src/models.py` で Tortoise ORM を使用して定義
- **APIルート**: `src/api.py` に集約
- **データベース**: `src/database.py` で設定、Aerich でマイグレーション管理

### 主要な設計パターン
1. **APIバージョニング**: 全エンドポイントは `/api/v1/` プレフィックス付き
2. **型安全性**: クライアントは完全な TypeScript、サーバーは Python 型ヒント
3. **完全非同期**: クライアント (React Suspense) もサーバー (FastAPI async) も完全非同期
4. **ファイルベースルーティング**: クライアントは TanStack Router のファイルベースルーティングで自動ルート生成

### データベーススキーマ
- **tweets**: Twitter から取得したツイートデータを保存
- **read_tweets**: ユーザーが既読したツイートを追跡
- **bookmarked_tweets**: ユーザーのブックマークを保存

### 開発ツール
- **Task**: クロスプラットフォームタスクランナー（全コマンドは `task` で開始）
- **mise**: Node.js 22、pnpm、uv、task のバージョン管理
- **Biome** (Client): JavaScript/TypeScript フォーマッター・リンター
- **Ruff** (Server): Python フォーマッター・リンター
- **Vitest** (Client): Vite 統合のテストランナー
- **pytest** (Server): Python テストフレームワーク

## 開発方針

### テスト駆動開発 (TDD)
このプロジェクトではテスト駆動開発を採用しています。新機能の実装や既存機能の修正を行う際は、必ず以下の手順に従ってください：

1. **テストを先に書く**: 実装前に失敗するテストを作成
2. **最小限の実装**: テストが通る最小限のコードを実装
3. **リファクタリング**: テストが通ることを確認しながらコードを改善

### テストケースの粒度
テストケースは**ビジネス側の観点から見た振る舞い**の粒度で作成してください：

- ❌ 悪い例: `calculateTotal() が正しい値を返すこと`
- ✅ 良い例: `ユーザーがツイートをブックマークすると、ブックマーク一覧に表示されること`

テストの記述は、技術的な実装詳細ではなく、ユーザーやシステムの振る舞いに焦点を当てるようにしてください。