/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as TestApiImport } from './routes/test.api'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as DemoStoreImport } from './routes/demo.store'
import { Route as AdminUsersImport } from './routes/admin.users'
import { Route as AdminUsersUserIdImport } from './routes/admin.users.$userId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TestApiRoute = TestApiImport.update({
  id: '/test/api',
  path: '/test/api',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const DemoStoreRoute = DemoStoreImport.update({
  id: '/demo/store',
  path: '/demo/store',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersUserIdRoute = AdminUsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => AdminUsersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof rootRoute
    }
    '/demo/store': {
      id: '/demo/store'
      path: '/demo/store'
      fullPath: '/demo/store'
      preLoaderRoute: typeof DemoStoreImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/test/api': {
      id: '/test/api'
      path: '/test/api'
      fullPath: '/test/api'
      preLoaderRoute: typeof TestApiImport
      parentRoute: typeof rootRoute
    }
    '/admin/users/$userId': {
      id: '/admin/users/$userId'
      path: '/$userId'
      fullPath: '/admin/users/$userId'
      preLoaderRoute: typeof AdminUsersUserIdImport
      parentRoute: typeof AdminUsersImport
    }
  }
}

// Create and export the route tree

interface AdminUsersRouteChildren {
  AdminUsersUserIdRoute: typeof AdminUsersUserIdRoute
}

const AdminUsersRouteChildren: AdminUsersRouteChildren = {
  AdminUsersUserIdRoute: AdminUsersUserIdRoute,
}

const AdminUsersRouteWithChildren = AdminUsersRoute._addFileChildren(
  AdminUsersRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/users': typeof AdminUsersRouteWithChildren
  '/demo/store': typeof DemoStoreRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/test/api': typeof TestApiRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/users': typeof AdminUsersRouteWithChildren
  '/demo/store': typeof DemoStoreRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/test/api': typeof TestApiRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/users': typeof AdminUsersRouteWithChildren
  '/demo/store': typeof DemoStoreRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/test/api': typeof TestApiRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/admin/users'
    | '/demo/store'
    | '/demo/tanstack-query'
    | '/test/api'
    | '/admin/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/admin/users'
    | '/demo/store'
    | '/demo/tanstack-query'
    | '/test/api'
    | '/admin/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/admin/users'
    | '/demo/store'
    | '/demo/tanstack-query'
    | '/test/api'
    | '/admin/users/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  AdminUsersRoute: typeof AdminUsersRouteWithChildren
  DemoStoreRoute: typeof DemoStoreRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  TestApiRoute: typeof TestApiRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  AdminUsersRoute: AdminUsersRouteWithChildren,
  DemoStoreRoute: DemoStoreRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  TestApiRoute: TestApiRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/admin/users",
        "/demo/store",
        "/demo/tanstack-query",
        "/test/api"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/admin/users": {
      "filePath": "admin.users.tsx",
      "children": [
        "/admin/users/$userId"
      ]
    },
    "/demo/store": {
      "filePath": "demo.store.tsx"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/test/api": {
      "filePath": "test.api.tsx"
    },
    "/admin/users/$userId": {
      "filePath": "admin.users.$userId.tsx",
      "parent": "/admin/users"
    }
  }
}
ROUTE_MANIFEST_END */
