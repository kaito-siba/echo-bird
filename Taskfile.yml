version: "3"

tasks:
  install:
    desc: Install all dependencies
    cmds:
      - task: install:client
      - task: install:server

  install:client:
    desc: Install client dependencies
    dir: apps/client
    cmds:
      - pnpm install

  install:server:
    desc: Install server dependencies
    dir: apps/server
    cmds:
      - uv sync

  # Database tasks
  db:up:
    desc: Start database with Docker Compose
    cmds:
      - docker-compose up -d postgres

  db:down:
    desc: Stop database
    cmds:
      - docker-compose down

  db:restart:
    desc: Restart database
    cmds:
      - task: db:down
      - task: db:up

  db:logs:
    desc: Show database logs
    cmds:
      - docker-compose logs -f postgres

  db:shell:
    desc: Connect to database shell
    cmds:
      - docker-compose exec postgres psql -U postgres -d echo_bird

  db:reset:
    desc: Reset database (remove volume and restart)
    cmds:
      - docker-compose down -v
      - docker-compose up -d postgres

  db:status:
    desc: Check database status
    cmds:
      - docker-compose ps postgres

  # Development tasks
  dev:
    desc: Run development servers
    deps: [dev:client, dev:server]

  dev:full:
    desc: Start database and run development servers
    deps: [db:up]
    cmds:
      - task: dev

  dev:client:
    desc: Run client development server
    dir: apps/client
    cmds:
      - pnpm dev

  dev:server:
    desc: Run server development server
    dir: apps/server
    cmds:
      - uv run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

  # Database migration tasks
  db:init:
    desc: Initialize database and create admin user
    dir: apps/server
    cmds:
      - uv run scripts/init_db.py

  db:migrate:
    desc: Run database migrations
    dir: apps/server
    cmds:
      - uv run aerich upgrade

  db:migrate:init:
    desc: Initialize database migrations
    dir: apps/server
    cmds:
      - uv run aerich init-db

  db:migrate:create:
    desc: Create new migration
    dir: apps/server
    cmds:
      - uv run aerich migrate --name "{{.CLI_ARGS}}"

  db:migrate:history:
    desc: Show migration history
    dir: apps/server
    cmds:
      - uv run aerich history

  build:
    desc: Build for production
    cmds:
      - task: build:client

  build:client:
    desc: Build client for production
    dir: apps/client
    cmds:
      - pnpm build

  lint:
    desc: Run linters
    cmds:
      - task: lint:client
      - task: lint:server

  lint:client:
    desc: Lint client code
    dir: apps/client
    cmds:
      - pnpm lint

  lint:server:
    desc: Lint server code
    dir: apps/server
    cmds:
      - uv run ruff check .
      - uv run ruff format . --check

  format:
    desc: Format code
    cmds:
      - task: format:client
      - task: format:server

  format:client:
    desc: Format client code
    dir: apps/client
    cmds:
      - pnpm format

  format:server:
    desc: Format server code
    dir: apps/server
    cmds:
      - uv run ruff check . --fix
      - uv run ruff format .

  test:
    desc: Run tests
    cmds:
      - task: test:client
      - task: test:server

  test:client:
    desc: Run client tests
    dir: apps/client
    cmds:
      - pnpm test

  test:server:
    desc: Run server tests
    dir: apps/server
    cmds:
      - uv run pytest

  type-check:
    desc: Run type checking
    cmds:
      - task: type-check:client
      - task: type-check:server

  type-check:client:
    desc: Type check client code
    dir: apps/client
    cmds:
      - pnpm type-check

  type-check:server:
    desc: Type check server code
    dir: apps/server
    cmds:
      - uv run mypy app

  clean:
    desc: Clean build artifacts and caches
    cmds:
      - rm -rf apps/client/dist
      - rm -rf apps/client/node_modules
      - rm -rf apps/server/__pycache__
      - rm -rf apps/server/.pytest_cache
      - rm -rf apps/server/.ruff_cache
      - rm -rf apps/server/.mypy_cache
